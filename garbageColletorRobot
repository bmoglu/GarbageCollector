#include<Servo.h>

Servo kolMotor_Sag; //sg90 kol sag motor
Servo kolMotor_Sol; //sg90 kol sol motor
Servo kolMotor_YA; //mg90s yukarı-assagı motor

Servo vagonSag; //mg90s vagon sag
Servo vagonSol; //mg90s vagon sol

const int in1=0; //teker için pinler
const int in2=1;
const int in3=2;
const int in4=4;

const int enbA=3; // tekerlek pwm 3
const int enbB=5; // tekerlek pwm 5

const int trig_pin=8; // trig pini dig 8
const int echo_pin=7; // echo pini dig 7

int sure=0; // mesafe sensörü için
int mesafe=0; // engelle sensör arası mesafe için
int poz=0; // kol pozisyonu için

const int cny1=A0; // çöpü görme
const int cny2=A1; // çöp kutusunu görme
const int cny3=A2; //alanda kalmak için sol
const int cny4=A3; // alanda kalmak için sağ

int sol=3; // esitlik kontrolü için
int sag=5;
int referansDegeri=800; // siyah beyaz ayrımı yapan deger
int sensorDegeri=0;
int sensorDegeri2=0;
int sensorDegeri3=0;
int sensorDegeri4=0;

int cop_sayisi=0; // kolla tutulup vagona atılan çöp saıyısı
int buldu=0; // çöp bulduysa 1 olur.
int mesafe_ayar=0;
int cop_kutusu_bulma=0;

void setup() {

  kolMotor_Sag.attach(9); // 9.pwm pini vagon sağdan gelen pwm
  kolMotor_Sol.attach(11); // 11.pwm pini
  kolMotor_YA.attach(10); // 10.pwm pini 

   // vagonSag.attach(9); // 9.pwm pini
  vagonSol.attach(6); // 6.pwm pini

  pinMode(in1, OUTPUT); // djital pinlerin çıkış ayarlaması
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
 
  pinMode(enbA,OUTPUT); // pwm pinler çıkış ayarlaması sol olsun
  pinMode(enbB, OUTPUT); // sağ olsun
  
  pinMode(cny1,OUTPUT); // çöp görme sensörü çıkış ayarlaması
  pinMode(cny2,OUTPUT); //çöp kutusu görme
  pinMode(cny3,OUTPUT); //alanda kalma
  pinMode(cny4,OUTPUT); //alanda kalma
     
  pinMode(trig_pin,OUTPUT); //mesafe sensörü trig pini çıkış yapıldı
  pinMode(echo_pin,INPUT); // mesafe sensörü echo pini giriş yapıldı
  Serial.begin(9600); // veri yollama hızı

}

void loop() {
 alanda_kal();
 
 buldu=cop_mu();
 if(buldu==1){
   mesafe_ayar=mesafe_olc();
   
   while(mesafe_ayar <= 5){ // 5 cm olana kadar
    turn(1, 1, 80, 80);
    turn(0, 0, 0, 0); 
   }
   cop_al(); // çöpü tut
      delay(1000);
   cop_sayisi++;
   
   if(cop_sayisi==5){ // vagon dolmuştur çöp kutusuna gitmek gerek
    while(!cop_kutusu()){
      turn(1, 1, 80, 80);
      turn(0, 1, 40, 10);
    }
    ters_don();
    vagon_bosaltma();
    delay(500);
    }
  }
}

void cop_al(){ // çöpü tutar.
  for(poz=90; poz>=0; poz--){// kolu indir.
    kolMotor_YA.write(poz);
    delay(10);
  }
  
  delay(1500);
  
  for(poz=0; poz<=90; poz++){// çöpü tut
    kolMotor_Sag.write(poz); // sağ ve sol motoru aynı anda çevirmek için bağlantıya dikkat et!!!
    kolMotor_Sol.write(poz);
    delay(10);
    }

    delay(1000);

    for(poz=0; poz<=90; poz++){ // kolu kaldır
    kolMotor_YA.write(poz);
    delay(10);
  }

  delay(1500);

  for(poz=90; poz>=0; poz--){// çöpü bırak
    kolMotor_Sag.write(poz);
    kolMotor_Sol.write(poz);
    delay(10);
  }
}

void vagon_bosaltma(){ // vagonu kaldırma
  for(poz=0; poz<=135; poz++){
    vagonSag.write(poz);
    vagonSol.write(poz);
    delay(10);
  }

  delay(1500);
  
  for(poz=135; poz>=0; poz--){
    
    vagonSag.write(poz);
    vagonSol.write(poz);
    delay(10);
  }
}

int mesafe_olc(){
  digitalWrite(trig_pin, HIGH);
  delay(1);
  digitalWrite(trig_pin, LOW);
  sure = pulseIn(echo_pin, HIGH);
  mesafe = (sure/2) / 29.1;
  
  return mesafe;
}


int cop_mu(){
  sensorDegeri= analogRead(cny1);
  if(sensorDegeri < referansDegeri) // beyaz olabilir. referans degerini dene
    return 1; // çöpü buldu
  else
    return 0; // bulunamadı
 }

int cop_kutusu(){
  sensorDegeri2=analogRead(cny2);
  if(sensorDegeri2 < referansDegeri)
    return 1; // çöp kutusu bulundu.
  else
    return 0; //bulunamadı.  
}

void alanda_kal(){ // 3 ise sol sensör  5 ise sağ sensör 
  sensorDegeri3=analogRead(cny3);
  sensorDegeri4=analogRead(cny4);

  if(sensorDegeri3 < referansDegeri)
    sol=3;
  else
    sol=0;

  if(sensorDegeri4 < referansDegeri)
    sag=5;
  else
    sag=0;

  if(sol==3 && sag==5){ // iki sensörde beyaz görme
    turn(-1, -1, -80, -80);  // geri git sağa dön
    turn(1, 0, 10, 40);
  }
  else if(sol==3){ // sol sensör beyaz görme
    turn(-1, -1, -80, -80); // geri git sağa dön
    turn(1, 0, 10, 40);
  }
  else if(sag==5){ // sag sensör beyaz görme
    turn(-1, -1, -80, -80); // geri git sola dön
    turn(0, 1, 40, 10);
  }
  else{ // iki sensörde siyah görme
    turn(1, 1, 80, 80); // devam et
  }  
}

void ters_don(){
  delay(100); 
  movement(0, 100);
  delay(100);
}

/**
 * r  l
 * 1  1 ileri
 * 1  0 sağ
 * 0  1 sol
 * 0  0 dur
 * -1 -1  geri
 */

void turn(int r, int l,int rSpeed, int lSpeed ){
  delay(100);
  if(r == 1 && l == 1)
    movement(rSpeed, lSpeed);
  else if (r == 1 && l == 0)
    movement(rSpeed, lSpeed);
  else if (r == 0 && l == 1)
    movement(rSpeed, lSpeed);
  else if (r == 0 && l == 0)
    movement(rSpeed, lSpeed);
  else if (r == -1 && l == -1)
    movement(rSpeed, lSpeed);
    delay(100);
}

void movement(int rSpeed, int lSpeed){
  digitalWrite(in1,HIGH);
  digitalWrite(in2,HIGH);
  digitalWrite(in3,HIGH);
  digitalWrite(in4,HIGH);

  analogWrite(enbA, lSpeed);
  analogWrite(enbB, rSpeed);
 }
